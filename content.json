{"pages":[{"title":"标签","text":"","link":"/tags/index.html"},{"title":"分类","text":"","link":"/categories/index.html"}],"posts":[{"title":"搭建博客","text":"准备：github、hexo、npm新建一个blog目录，进入该目下执行如下代码1234$ npm install -g hexo$ hexo init$ hexo g$ hexo s 浏览器打开，预览一下本地博客项目：http://localhost:4000 部署到git1、注册git账号2、创建仓库：Repository name（仓库名字）：github账号名.github.io(这里不区分大小写)3、修改_config.yml 配置文件 123$ type: git$ repository: 仓库地址$ branch: master 执行如下代码123$ npm install hexo-deployer-git --save$ hexo g$ hexo d 成功之输入后，在浏览器上输入:你的 github 账号名.github.io，就可以看到自己的博客 更换主题在 hexo 官网上选择喜欢的主题 ，克隆自己喜欢的模板以icarus这个小众主题为例，使用安装，到博客目录下执行如下代码 12$ npm install hexo-theme-icarus$ hexo config theme icarus 完成更换主题 创建分类和标签到博客目录下执行如下代码 12$ hexo new page categories //创建分类$ hexo new page tags //创建标签 到source/categories/index.md下，编辑内容： 1234---title: 分类type: categories--- 到source/tags/index.md下，编辑内容： 1234---title: 标签type: tags--- source/tags/_posts为文章目录，使用 markdown 语法编辑 12345---title: 搭建博客categories: 分类名称tags: 标签名称（多个标签可用数组）--- 更改语言_config.yml 文件夹下，更改如下代码： 1234567---language: en---改为---language: zh-CN--- 注意icarus需要展示阅读更多按钮来实现文章折叠，使用以下标签1&lt;!-- more --&gt; 把&lt; !- more -&gt;标签放在你的文章里。在此标记之前发布的内容将被标记为摘录。这个标记之后的内容将不会显示在索引页上。 icarus配置项hexo配置项","link":"/2021/06/10/init-blog/"},{"title":"git命令","text":"git init12$ git init // 在当前目录新建一个Git代码库$ git init [project-name] // 新建一个目录，将其初始化为Git代码库 git clone1$ git clone [url] // 克隆一个项目和它的整个代码历史 git add1234$ git add . // 添加当前目录的所有文件到暂存区$ git add [file1] [file2] ... // 添加指定文件到暂存区$ git add [dir] // 添加指定目录到暂存区，包括子目录$ git add -p // 对于同一个文件的多处变化，可以实现分次提交 git rm12$ git rm [file1] [file2] ... // 删除工作区文件，并且将这次删除放入暂存区$ git rm --cached [file] // 停止追踪指定文件，但该文件会保留在工作区 git mv1$ git mv [file-original] [file-renamed] // 修改名文件，并且将这个修改名放入暂存区 git commit123456$ git commit -m [message] // 提交暂存区到仓库区$ git commit [file1] [file2] ... -m [message] // 提交暂存区的指定文件到仓库区$ git commit -a // 提交工作区自上次commit之后的变化，直接到仓库区$ git commit -v[message] // 提交时显示所有diff信息$ git commit --amend -m [message] // 使用一次新的commit，替代上一次提交，如果代码没有任何新变化，则用来改写上一次commit的提交信息$ git commit --amend [file1] [file2] ... // 重做上一次commit，并包括指定文件的新变化 git branch12345678910$ git branch // 列出所有本地分支$ git branch -r // 列出所有远程分支$ git branch -a // 列出所有本地分支和远程分支$ git branch [branch-name] // 新建一个分支，但依然停留在当前分支$ git branch [branch] [commit] // 新建一个分支，指向指定commit$ git branch --track [branch] [remote-branch] // 新建一个分支，与指定的远程分支建立追踪关系$ git branch --set-upstream [branch] [remote-branch] // 建立追踪关系，在现有分支与指定的远程分支之间$ git branch -d [branch-name] // 删除分支$ git branch -dr [remote/branch] // 删除远程分支$ git push origin --delete &lt;remote-branchname&gt; // 删除远程分支 git checkout1234567$ git checkout -b [branch] // 新建一个分支，并切换到该分支$ git checkout [branch-name] // 切换到指定分支，并更新工作区$ git checkout - // 切换到上一个分支$ git checkout -b [branch] [tag] // 新建一个分支，指向某个tag$ git checkout [file] // 恢复暂存区的指定文件到工作区$ git checkout [commit] [file] // 恢复某个commit的指定文件到暂存区和工作区$ git checkout . // 恢复暂存区的所有文件到工作区 git merge1$ git merge [branch] // 合并指定分支到当前分支 git cherry-pick1$ git cherry-pick [commit] // 选择一个commit，合并进当前分支 git pull1$ git pull [remote] [branch] // 取回远程仓库的变化，并与本地分支合并 git push1234567$ git push origin --delete [branch-name] // 删除远程分支$ git push origin :refs/tags/[tagName] // 删除远程tag$ git push [remote] [tag] // 提交指定tag$ git push [remote] --tags // 提交所有tag$ git push [remote] [branch] // 上传本地指定分支到远程仓库$ git push [remote] --force // 强行推送当前分支到远程仓库，即使有冲突$ git push [remote] --all // 推送所有分支到远程仓库 git tag1234$ git tag // 列出所有tag$ git tag [tag] // 新建一个tag在当前commit$ git tag [tag] [commit] // 新建一个tag在指定commit$ git tag -d [tag] // 删除本地tag git show1234$ git show [commit] // 显示某次提交的元数据和内容变化$ git show --name-only [commit] // 显示某次提交发生变化的文件$ git show [commit]:[filename] // 显示某次提交时，某个文件的内容$ git show [tag] // 查看tag信息 git status1$ git status // 显示有变更的文件 git fetch1$ git fetch [remote] // 下载远程仓库的所有变动 git remote1234$ git remote -v // 显示所有远程仓库$ git remote show [remote] // 显示某个远程仓库的信息$ git remote add [shortname] [url] // 增加一个新的远程仓库，并命名$ git remote set-url origin [url] // 切换git源 git reset12345$ git reset --hard // 重置暂存区与工作区，与上一次commit保持一致$ git reset [commit] // 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变$ git reset --hard [commit] // 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致$ git reset --hard HEAD^ / 重置当前分支的HEAD为上一次commit，同时重置暂存区和工作区，与上一次commit一致$ git reset --keep [commit] // 重置当前HEAD为指定commit，但保持暂存区和工作区不变 git stash12345$ git stash // 暂时将未提交的变化移除到堆栈中$ git stash save [name] // 暂时将未提交的变化移除到堆栈中，并命名为【name】$ git stash pop // 从堆栈中将之前未提交的变化再移入，并删除堆栈中暂存$ git stash apply stash@{[number]} // 从堆栈中将之前未提交的变化再移入，不删除堆栈中暂存$ git stash clear // 清除堆栈中的所有内容 git log12$ git log // 显示当前分支的版本历史$ git log --stat // 显示commit历史，以及每次commit发生变更的文件","link":"/2021/07/21/git/"}],"tags":[{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"git","slug":"git","link":"/tags/git/"}],"categories":[{"name":"hexo","slug":"hexo","link":"/categories/hexo/"},{"name":"git","slug":"git","link":"/categories/git/"}]}